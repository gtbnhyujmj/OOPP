抽象類別（Abstract Class）在 Python 裡，是一種不能直接被實例化（不能直接用來建立物件）的類別，主要用來當作其他類別的「藍圖」或「模板」。

簡單解釋：
抽象類別定義了一些方法，但不實作它們（只留方法名稱），
讓子類別去「必須實作」這些方法，確保子類別有特定功能。

不能直接用抽象類別建立物件，只能用它來繼承。

為什麼要用抽象類別？
想像：

你在設計「動物」類別，

但每種動物走路的方式不一樣，

你想規定所有動物「一定要有走路的方法」，但不想寫具體走法，

from abc import ABC, abstractmethod

class Animal(ABC):  # 抽象類別要繼承 ABC
    @abstractmethod
    def walk(self):
        pass  # 不實作，讓子類別去實作

抽象類別 (ABC)	不能直接建立物件的類別，只能被繼承
抽象方法	只定義名字、不實作的函式，子類必須實作
@abstractmethod	標示抽象方法的裝飾器
繼承抽象類別	子類別要實作所有抽象方法，否則無法實例化子類

裝飾器（Decorator）簡單說：
裝飾器就是一個用來「標記」或「改變」函式／方法行為的特殊工具，

它可以幫你加額外功能，而不需要改動原本的函式程式碼。

像「螢光筆」的原因：
你寫好一段程式（函式），

用裝飾器標記它，像用螢光筆畫出來一樣，

裝飾器會「告訴 Python 這個函式不一樣」或「幫它加點特別功能」。

ABC 是 Abstract Base Class（抽象基底類別）的縮寫，
你繼承它，表示你這個類別是「抽象類別」，不能直接建立物件。

@abstractmethod 是用來標記抽象方法的裝飾器，
告訴 Python 這個方法必須由子類別實作，而且本身不能有實作內容。
